import * as ut from "../utils.js"
import { ECDH } from "crypto"

// these are the values JOSE assigns to the crv and kty portions of the jwk
const crv = 'P-384';
const kty = 'EC';

// this is the value used by nodejs crypto for ECDH.convertKey
const cryptoCrv = 'secp384r1';

// these are the values used in the multibase version of this key
// algPre specifies the algorithm, the other two specify if the Y string is odd or even
const algPre = '8124';
const oddPre = '03';
const evenPre = '02';

/**
 * This function accepts X and Y values from a public JWK generated by JOSE
 * with the ES384 algorithm. It then converts it into a multibase encoded string
 * that can be used with did:key
 *
 * @param x the X value from the ES384 JWK
 * @param y the Y value from the ES384 JWK
 * @returns a multibase encoded string version of the passed key
 */
function toMbase(x: string, y: string): string {
    // check if y is even
    const isYEven = ut.isBase64Even(y);

    // assemble compressed key by adding alg specific prefix, Y is even indicator and converting to hex
    const compressed = algPre + (isYEven ? evenPre : oddPre) + ut.base64ToHex(x);

    // convert to multibase
    const mbase = ut.compressedToMbase(compressed);

    return mbase;
}

/**
 * This function accepts the multibase encoded string (usually from a did:key),
 * decodes it and converts it into a JWK using the ES384 algorithm.
 *
 * @param mbase the multibase encoded string
 * @returns a full public JWK version of the passed key
 */
function toJwk(mbase: string): JsonWebKey {
    // setup empty jwk
    const jwk = {
        x: '',
        y: '',
        kty: kty,
        crv: crv
    }

    // get compressed key from mbase encoding
    const compressed = ut.mbaseToCompressed(mbase);

    // use crypto lib to generate uncompressed key ('04' + x + y) from compressed key (without mbase prefix)
    const uncompressedKey = ECDH.convertKey(compressed.replace(algPre,''),
        cryptoCrv, 'hex', 'base64url', 'uncompressed').toString();

    // remove prefix indicating this is an uncompressed key
    const keyBuffer = Buffer.from(uncompressedKey, 'base64url');
    const trimmedUncompressedKey = keyBuffer.slice(1);

    // first half is x, second half is y
    jwk.x = trimmedUncompressedKey.slice(0, trimmedUncompressedKey.length / 2).toString('base64url');
    jwk.y = trimmedUncompressedKey.slice(trimmedUncompressedKey.length / 2).toString('base64url');

    return jwk;
}

export {
    toMbase, toJwk
}
